package blackJack;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *Game Finished 2/16/2013
 * @author Victor
 */
public class BlackJackGUI extends javax.swing.JFrame 
{

    protected Player player1, computer;
    protected Deck deckOfCards;
    protected JButton [] cardButtons,compCardButtons;
    protected ImageIcon backCard;
    protected int tillShuffle;
    protected JFileChooser fc;
    /**
     * Creates new form BlackJackGUI
     */
    public BlackJackGUI() {
        player1 = new Player();
        computer = new Player();
        backCard = new ImageIcon(getClass().getClassLoader().getResource("backSide.png"));
        initComponents();
        deckOfCards = new Deck();
        tillShuffle = 4;
        fc = new JFileChooser("C:\\");
        userActionFieldEnabled(false);
    }
    
     public ImageIcon getImage(String shape, int number)
     {
    	return new ImageIcon(getClass().getClassLoader().getResource(shape+number+".png"));    	 
     }
     
     public void startGame()
    {
       if(tillShuffle == 0)
       {
           deckOfCards.shuffle();
           tillShuffle = 4;
       }
       tillShuffle--;
       for(int i = 0; i < 2 ; i++)
       {
          HitButtonActionPerformed(null);
          Card c = deckOfCards.dealCard();
          computer.hand.addCard(c);
       }
       String str = "cards\\"+computer.hand.cardsInHand[0].getShape()+computer.hand.cardsInHand[0].getNumber()+".png";
       compCardButtons[0].setIcon(getImage(computer.hand.cardsInHand[0].getShape(),computer.hand.cardsInHand[0].getNumber()));
       compCardButtons[0].setEnabled(true);
       userActionFieldEnabled(true);
       computerPointsField.setText(String.valueOf(computer.hand.cardsInHand[0].value));
       playerPointsField.setText(String.valueOf(player1.hand.value));
       checkWinLose();
    }
    
    public void computerHit()
    {
       Card c = deckOfCards.dealCard();
       computer.hand.addCard(c);
       compCardButtons[computer.hand.size-1].setIcon(getImage(c.shape,c.number));
       compCardButtons[computer.hand.size-1].setEnabled(true);   
    }
    
    public void checkWinLose()
    {
       if(player1.hand.checkWin())
       {
          userActionFieldEnabled(false);
          winButton.setVisible(true);
          return;
       }
       if(player1.hand.checkLose())
       {
          userActionFieldEnabled(false);
          loseButton.setVisible(true);
       }
    }
    
    public void startCardButtons()
    {
       cardButtons = new JButton[5];
       cardButtons[0] = card1Button;
       cardButtons[1] = card2Button;
       cardButtons[2] = card3Button;
       cardButtons[3] = card4Button;
       cardButtons[4] = card5Button;
       
       compCardButtons = new JButton[5];
       compCardButtons[0] = compCard1Button;
       compCardButtons[1] = compCard2Button;
       compCardButtons[2] = compCard3Button;
       compCardButtons[3] = compCard4Button;
       compCardButtons[4] = compCard5Button;
       
       resetCardButtons();
    }
    
    public void resetCardButtons()
    {
       for(int i = 0; i < 5; i++)
       {
          cardButtons[i].setEnabled(false);
          cardButtons[i].setIcon(backCard);
       }
       for(int i = 0; i < 5; i++)
       {
          compCardButtons[i].setEnabled(false);
          compCardButtons[i].setIcon(backCard);
       }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        primaryPanel = new javax.swing.JPanel();
        newGameButton = new javax.swing.JButton();
        continueButton = new javax.swing.JButton();
        loadPlayerPanel = new javax.swing.JPanel();
        askNameLabel = new javax.swing.JLabel();
        nameInput = new javax.swing.JTextField();
        savedGameEnter = new javax.swing.JButton();
        browseSavedGames = new javax.swing.JButton();
        askNameOfGame = new javax.swing.JLabel();
        cancel = new javax.swing.JButton();
        gamePanel = new javax.swing.JPanel();
        ComputerLabel = new javax.swing.JLabel();
        PlayerNameLabel = new javax.swing.JLabel(player1.getName());
        HitButton = new javax.swing.JButton();
        HoldButton = new javax.swing.JButton();
        CreditsField = new javax.swing.JTextField();
        CreditsLabel = new javax.swing.JLabel();
        gameCenterPanel = new javax.swing.JLayeredPane();
        card1Button = new javax.swing.JButton();
        card5Button = new javax.swing.JButton();
        card4Button = new javax.swing.JButton();
        card3Button = new javax.swing.JButton();
        card2Button = new javax.swing.JButton();
        betButton = new javax.swing.JButton();
        playerPointsField = new javax.swing.JTextField();
        computerPointsField = new javax.swing.JTextField();
        betTextField = new javax.swing.JTextField();
        winButton = new javax.swing.JButton();
        loseButton = new javax.swing.JButton();
        compCard4Button = new javax.swing.JButton();
        compCard3Button = new javax.swing.JButton();
        compCard2Button = new javax.swing.JButton();
        compCard1Button = new javax.swing.JButton();
        compCard5Button = new javax.swing.JButton();
        drawButton = new javax.swing.JButton();
        computerPointsLabel = new javax.swing.JLabel();
        playerPointsLabel = new javax.swing.JLabel();
        newGameNames = new javax.swing.JPanel();
        EnterNameLabel = new javax.swing.JLabel();
        newNameEnterButton = new javax.swing.JButton();
        cancelNewGameButton = new javax.swing.JButton();
        newNameTextField = new javax.swing.JTextField();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        SaveGame = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BlackJack");

        newGameButton.setText("New Game");
        newGameButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });

        continueButton.setText("Continue");
        continueButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout primaryPanelLayout = new javax.swing.GroupLayout(primaryPanel);
        primaryPanel.setLayout(primaryPanelLayout);
        primaryPanelLayout.setHorizontalGroup(
            primaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(primaryPanelLayout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addGroup(primaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newGameButton)
                    .addComponent(continueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(264, Short.MAX_VALUE))
        );

        primaryPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {continueButton, newGameButton});

        primaryPanelLayout.setVerticalGroup(
            primaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, primaryPanelLayout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addComponent(newGameButton)
                .addGap(47, 47, 47)
                .addComponent(continueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132))
        );

        primaryPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {continueButton, newGameButton});

        loadPlayerPanel.setVisible(false);

        askNameLabel.setText("Enter name of saved game: ");

        nameInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameInputKeyPressed(evt);
            }
        });

        savedGameEnter.setText("OK");
        savedGameEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savedGameEnterActionPerformed(evt);
            }
        });

        browseSavedGames.setText("Browse");
        browseSavedGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSavedGamesActionPerformed(evt);
            }
        });

        askNameOfGame.setText("Browse saved files: ");

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loadPlayerPanelLayout = new javax.swing.GroupLayout(loadPlayerPanel);
        loadPlayerPanel.setLayout(loadPlayerPanelLayout);
        loadPlayerPanelLayout.setHorizontalGroup(
            loadPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadPlayerPanelLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(loadPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(askNameLabel)
                    .addComponent(askNameOfGame))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loadPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loadPlayerPanelLayout.createSequentialGroup()
                        .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(savedGameEnter))
                    .addComponent(browseSavedGames, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(177, Short.MAX_VALUE))
        );
        loadPlayerPanelLayout.setVerticalGroup(
            loadPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadPlayerPanelLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(loadPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(askNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(savedGameEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(loadPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(askNameOfGame)
                    .addComponent(browseSavedGames))
                .addGap(33, 33, 33)
                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(243, Short.MAX_VALUE))
        );

        gamePanel.setVisible(false);

        ComputerLabel.setText("Victor's Bot");

        PlayerNameLabel.setText("player1");

        HitButton.setText("Hit");
        HitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HitButtonActionPerformed(evt);
            }
        });

        HoldButton.setText("Hold");
        HoldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoldButtonActionPerformed(evt);
            }
        });

        CreditsField.setEditable(false);

        CreditsLabel.setText("Credits");

        card1Button.setMaximumSize(new java.awt.Dimension(71, 96));
        card1Button.setBounds(320, 280, 71, 96);
        gameCenterPanel.add(card1Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        card5Button.setMaximumSize(new java.awt.Dimension(71, 96));
        card5Button.setBounds(40, 280, 71, 96);
        gameCenterPanel.add(card5Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        card4Button.setMaximumSize(new java.awt.Dimension(71, 96));
        card4Button.setBounds(110, 280, 71, 96);
        gameCenterPanel.add(card4Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        card3Button.setMaximumSize(new java.awt.Dimension(71, 96));
        card3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card3ButtonActionPerformed(evt);
            }
        });
        card3Button.setBounds(180, 280, 71, 96);
        gameCenterPanel.add(card3Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        card2Button.setMaximumSize(new java.awt.Dimension(71, 96));
        card2Button.setBounds(250, 280, 71, 96);
        gameCenterPanel.add(card2Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        betButton.setText("Initial Bet");
        betButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betButtonActionPerformed(evt);
            }
        });
        betButton.setBounds(260, 160, 110, 30);
        gameCenterPanel.add(betButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        playerPointsField.setEditable(false);
        playerPointsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerPointsFieldActionPerformed(evt);
            }
        });
        playerPointsField.setBounds(400, 320, 50, 30);
        gameCenterPanel.add(playerPointsField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        computerPointsField.setEditable(false);
        computerPointsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computerPointsFieldActionPerformed(evt);
            }
        });
        computerPointsField.setBounds(400, 30, 50, 30);
        gameCenterPanel.add(computerPointsField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        betTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betTextFieldActionPerformed(evt);
            }
        });
        betTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                betTextFieldKeyPressed(evt);
            }
        });
        betTextField.setBounds(200, 160, 50, 30);
        gameCenterPanel.add(betTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        winButton.setText("You Win!!");
        winButton.setVisible(false);
        winButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winButtonActionPerformed(evt);
            }
        });
        winButton.setBounds(100, 110, 240, 70);
        gameCenterPanel.add(winButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        loseButton.setText("You Lose!!!");
        loseButton.setVisible(false);
        loseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loseButtonActionPerformed(evt);
            }
        });
        loseButton.setBounds(100, 130, 240, 70);
        gameCenterPanel.add(loseButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        compCard4Button.setMaximumSize(new java.awt.Dimension(71, 96));
        compCard4Button.setBounds(110, 0, 71, 96);
        gameCenterPanel.add(compCard4Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        compCard3Button.setMaximumSize(new java.awt.Dimension(71, 96));
        compCard3Button.setBounds(180, 0, 71, 96);
        gameCenterPanel.add(compCard3Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        compCard2Button.setMaximumSize(new java.awt.Dimension(71, 96));
        compCard2Button.setBounds(250, 0, 71, 96);
        gameCenterPanel.add(compCard2Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        compCard1Button.setMaximumSize(new java.awt.Dimension(71, 96));
        compCard1Button.setBounds(320, 0, 71, 96);
        gameCenterPanel.add(compCard1Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        compCard5Button.setMaximumSize(new java.awt.Dimension(71, 96));
        compCard5Button.setBounds(40, 0, 71, 96);
        gameCenterPanel.add(compCard5Button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        drawButton.setText("Draw!!!!");
        drawButton.setVisible(false);
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });
        drawButton.setBounds(100, 110, 240, 70);
        gameCenterPanel.add(drawButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        computerPointsLabel.setText("Points");
        computerPointsLabel.setBounds(399, 10, 40, 14);
        gameCenterPanel.add(computerPointsLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        playerPointsLabel.setText("Points");
        playerPointsLabel.setBounds(400, 300, 50, 14);
        gameCenterPanel.add(playerPointsLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gamePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(gameCenterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(HoldButton, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                .addComponent(HitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(gamePanelLayout.createSequentialGroup()
                                .addComponent(CreditsField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CreditsLabel))))
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PlayerNameLabel)
                            .addComponent(ComputerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addComponent(ComputerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CreditsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreditsLabel))
                        .addGap(18, 18, 18)
                        .addComponent(HitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HoldButton)
                        .addGap(25, 25, 25))
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(gameCenterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(PlayerNameLabel)
                .addContainerGap())
        );

        newGameNames.setVisible(false);

        EnterNameLabel.setText("Enter name:");

        newNameEnterButton.setText("Enter");
        newNameEnterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newNameEnterButtonActionPerformed(evt);
            }
        });

        cancelNewGameButton.setText("Cancel");
        cancelNewGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelNewGameButtonActionPerformed(evt);
            }
        });

        newNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newNameTextFieldActionPerformed(evt);
            }
        });
        newNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                newNameTextFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout newGameNamesLayout = new javax.swing.GroupLayout(newGameNames);
        newGameNames.setLayout(newGameNamesLayout);
        newGameNamesLayout.setHorizontalGroup(
            newGameNamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newGameNamesLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(EnterNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(newNameEnterButton, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addGap(34, 34, 34))
            .addGroup(newGameNamesLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(cancelNewGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newGameNamesLayout.setVerticalGroup(
            newGameNamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newGameNamesLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(newGameNamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EnterNameLabel)
                    .addComponent(newNameEnterButton)
                    .addComponent(newNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(cancelNewGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        jMenuBar2.setBackground(Color.BLACK);

        jMenu1.setText("File");

        SaveGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveGame.setText("Save");
        SaveGame.setToolTipText("");
        SaveGame.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                SaveGameComponentAdded(evt);
            }
        });
        SaveGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveGameActionPerformed(evt);
            }
        });
        jMenu1.add(SaveGame);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar2.add(jMenu1);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(primaryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(loadPlayerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 97, Short.MAX_VALUE)
                    .addComponent(newGameNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 97, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(primaryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(loadPlayerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 6, Short.MAX_VALUE)
                    .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 7, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 85, Short.MAX_VALUE)
                    .addComponent(newGameNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 86, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        primaryPanel.setVisible(false);
        loadPlayerPanel.setVisible(true);
    }                                              

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        primaryPanel.setVisible(false);
        newGameNames.setVisible(true);
        deckOfCards.shuffle();
        startCardButtons();
        
    }                                             

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {                                       
        loadPlayerPanel.setVisible(false);
        primaryPanel.setVisible(true);
    }                                      

    private void cancelNewGameButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        newGameNames.setVisible(false);
        primaryPanel.setVisible(true);
    }                                                   

    private void newNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 

    }                                                

    private void newNameEnterButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        String name = newNameTextField.getText();
        if(name.length() > 9)
            name = name.substring(0, 10);
        player1.setName(name);
        PlayerNameLabel.setText(player1.getName());
        CreditsField.setText(String.valueOf(player1.getCredits()));
        newGameNames.setVisible(false);
        gamePanel.setVisible(true);
    }                                                  

    private void card3ButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void betButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        String str = betTextField.getText();
        str = str.replace(" ", "");
        if(str.length() == 0)
            return;
        for(int i = 0; i < str.length(); i++)
            if(Character.isAlphabetic(str.charAt(i)))
            {
               JOptionPane.showMessageDialog(null, "Invalid bet");
               return;
            }
        int bet = Integer.parseInt(str);
        if(bet > player1.getCredits())
        {
            JOptionPane.showMessageDialog(null,"Not enough credits");
            return;
        }
        if(bet < 5)
        {
           JOptionPane.showMessageDialog(null, "Minimum bet is 5 credits");
           return;
        }
        player1.subtractCredits(bet);
        CreditsField.setText(String.valueOf(player1.getCredits()));
        betFieldEnabled(false);
        startGame();
    }                                         

    private void HitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
       if(player1.hand.size == 5)
       {
          HoldButtonActionPerformed(null);
          return;
       }
       Card c = deckOfCards.dealCard();
       player1.hand.addCard(c);
       cardButtons[player1.hand.size-1].setIcon(getImage(c.shape,c.number));
       cardButtons[player1.hand.size-1].setEnabled(true);
       playerPointsField.setText(String.valueOf(player1.hand.value));
       checkWinLose();
       playerPointsField.setText(String.valueOf(player1.hand.value));
       
    }                                         

    private void HoldButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        userActionFieldEnabled(false);
        compCardButtons[1].setIcon(getImage(computer.hand.cardsInHand[1].shape,computer.hand.cardsInHand[1].number));
        compCardButtons[1].setEnabled(true);
        while(smartComputerMove())
        {
            Card c = deckOfCards.dealCard();
            computer.hand.addCard(c);
            compCardButtons[computer.hand.size-1].setIcon(getImage(c.shape,c.number));
            compCardButtons[computer.hand.size-1].setEnabled(true);
        }
        computerPointsField.setText(String.valueOf(computer.hand.value));
        compCheckTieWinLose();
        computerPointsField.setText(String.valueOf(computer.hand.value));
    }                                          

    public boolean smartComputerMove()
    {
    	int computerVal = computer.hand.value;
    	int playerVal = player1.hand.value;
        if(computer.hand.size == 4)
        	return false;
        if(computerVal == playerVal && computerVal > 17)
        	return false;
    	if(computer.hand.value > player1.hand.value)
    		return false;
    	return true;    	
    }
    
    public void compCheckTieWinLose()
    {
       if(computer.hand.value > 21)
       {
          if(computer.hand.aceInHand && computer.hand.valueOfAce)
          {
                computer.hand.value -= 10;
                computer.hand.valueOfAce = false;
                HoldButtonActionPerformed(null);
                return;
          }
          userActionFieldEnabled(false);
          winButton.setVisible(true);
          return;
       }
       if(computer.hand.checkWin())
       {
          userActionFieldEnabled(false);
          loseButton.setVisible(true);
          return;
       }
       if(computer.hand.value > player1.hand.value)
       {
          userActionFieldEnabled(false);
          loseButton.setVisible(true);
          return;
       }
       if(player1.hand.value > computer.hand.value)
       {
          userActionFieldEnabled(false);
          winButton.setVisible(true);
          return;
       }
       if(computer.hand.value == player1.hand.value)
       {
          if(computer.hand.aceInHand && computer.hand.valueOfAce)
          {
             computer.hand.value -= 10;
             computer.hand.valueOfAce = false;
             HoldButtonActionPerformed(null);
             return;
          }
          userActionFieldEnabled(false);
          drawButton.setVisible(true);
          return;
       }
    }
    
    private void winButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
       player1.addCredits(player1.currentBet*2);
       CreditsField.setText(String.valueOf(player1.credits));
       player1.hand.resetHand();
       computer.hand.resetHand();
       resetCardButtons();
       winButton.setVisible(false);
       betFieldEnabled(true);  
    }                                         

    private void loseButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        player1.hand.resetHand();
        computer.hand.resetHand();
        resetCardButtons();
        loseButton.setVisible(false);
        if(player1.credits < 5)
          {
              JOptionPane.showMessageDialog(gameCenterPanel, "Out of credits\nReseting to 100");
              player1.addCredits(100);
              CreditsField.setText(String.valueOf(player1.credits));
          }
        betFieldEnabled(true);
    }                                          

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
       
        player1.hand.resetHand();
        computer.hand.resetHand();
        resetCardButtons();
        drawButton.setVisible(false);
        if(player1.credits < 5)
          {
              JOptionPane.showMessageDialog(gameCenterPanel, "Out of credits\nReseting to 100");
              player1.addCredits(100);
              CreditsField.setText(String.valueOf(player1.credits));
          }
        betFieldEnabled(true);
    }                                          

    private void SaveGameActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if(!gamePanel.isShowing())
        {
            JOptionPane.showMessageDialog(primaryPanel,"No game to save");
            return;
        }
        fc.setFileSelectionMode(JFileChooser.CUSTOM_DIALOG);
        fc.setFileFilter(new FileNameExtensionFilter("T DAT files","txt","dat"));
        int returnVal = fc.showSaveDialog(null);
        File f = fc.getSelectedFile();
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
           if(f.exists())
           {
              int result = JOptionPane.showConfirmDialog(null,"OverWrite Game?",null,JOptionPane.YES_NO_OPTION);
              if(result == 1)
                  return;
           }
           writeData(f);
        }
        
    }                                        

    public void writeData(File f)
    {
       try
       {
    	  DataOutputStream dStream = new DataOutputStream(new FileOutputStream(f.getPath()+".dat"));
    	  dStream.writeUTF(player1.getName());//write name
    	  dStream.writeInt(player1.credits);//write credits
          for(int i = 0; i < player1.hand.size; i++)    // hand size
          {
        	 dStream.writeUTF(player1.hand.cardsInHand[i].shape);
        	 dStream.writeInt(player1.hand.cardsInHand[i].number);//write cards
          }
          dStream.writeUTF("end"); // delimiter
          dStream.writeUTF(deckOfCards.currentCard.data.shape);
          dStream.writeInt(deckOfCards.currentCard.data.number);//write current card
          Node<Card> n = deckOfCards.s.head.next;   //set deck
          while(n != null)
          {
        	 dStream.writeUTF(n.data.shape);
        	 dStream.writeInt(n.data.number);
             n = n.next;
          }
          dStream.writeUTF("end");
          dStream.writeUTF(computer.name);
          for(int i = 0; i < computer.hand.size; i++)
          {
        	 dStream.writeUTF(computer.hand.cardsInHand[i].shape);
        	 dStream.writeInt(computer.hand.cardsInHand[i].number);
          }
          dStream.writeUTF("end");
          dStream.close();
          JOptionPane.showMessageDialog(null,"Game Saved!!");
       }
       catch(java.io.FileNotFoundException ex)
       {
    	   JOptionPane.showMessageDialog(gamePanel, "Sorry you do not have permission to write there!!",null,JOptionPane.OK_OPTION); 	   
       }
       catch(Exception e)
       {
          e.printStackTrace();
       }
    }
    
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {                                     
       System.exit(0);
    }                                    

    private void SaveGameComponentAdded(java.awt.event.ContainerEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void browseSavedGamesActionPerformed(java.awt.event.ActionEvent evt) {                                                 
      fc.setFileFilter(new FileNameExtensionFilter("DAT files","dat"));
      fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
      int returnVal = fc.showOpenDialog(null);
      if(returnVal == JFileChooser.CANCEL_OPTION)
          return;
      File f = null;
      String str = fc.getSelectedFile().toString();
      if(!str.endsWith("dat"))
      {
         JOptionPane.showMessageDialog(null,"Invalid File Type!!!",null,JOptionPane.ERROR_MESSAGE);
         return;
      }
      if(returnVal == JFileChooser.APPROVE_OPTION)
      {
          f = fc.getSelectedFile();
      }
      loadSavedGame(f);
    }                                                

    private void savedGameEnterActionPerformed(java.awt.event.ActionEvent evt) {                                               
        String str = "C:\\"+nameInput.getText()+".dat";
        File f = new File(str);
        if(f.exists())
        {
            loadSavedGame(f);
        }
        else
        {
            JOptionPane.showMessageDialog(this,"File not found!!!",null,JOptionPane.ERROR_MESSAGE);
        }
    }                                              

    private void betTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void computerPointsFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void playerPointsFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void betTextFieldKeyPressed(java.awt.event.KeyEvent evt) {                                        
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
           betButtonActionPerformed(null);
        }
    }                                       

    private void nameInputKeyPressed(java.awt.event.KeyEvent evt) {                                     
        
    }                                    

    private void newNameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {                                            
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
           newNameEnterButtonActionPerformed(null);
        }
    }                                           
   /**
    * This method reads a saved file in the next order
    * line 1:  name of player
    * line 2: credits of player
    * line 3: current hand
    * line 4: set current card
    * line 5: current deck of cards
    * line 6: set computer name
    * line 7: set computer hand
    */
    public void loadSavedGame(File f)
    {
       try
       {
          DataInputStream dStream = new DataInputStream(new FileInputStream(f));
          player1.setName(dStream.readUTF());
          player1.setCredits(dStream.readInt());//read credits
          boolean read = true;
          while(read)              //delimiter for reading hand is end
          {
        	 String shape = dStream.readUTF();
        	 if(shape.equals("end"))
        		 read =false;
        	 else
        	 {
                Card c = new Card(shape,dStream.readInt());
                if(c.number>10)
                   c.setValue(10);
                else
                   c.setValue(c.number);
                player1.hand.addCard(c);   //format for reading hand. One line with "shape   number"
        	 }
          }
          
          //Read the saved card order
          //format of file is "shape  number.....end"
          Card curr= new Card(dStream.readUTF(),dStream.readInt());
          Node<Card> t = deckOfCards.s.head;
          read = true;
          while(read)
          {
        	 String shape = dStream.readUTF();
        	 if(shape.equals("end"))
        		 read = false;
        	 else
        	 {
                Card c = new Card(shape,dStream.readInt());
                Node<Card> temp = new Node(c,null);
                t.setNext(temp);
                t = t.next;
                if(c.number > 10)
                {
                   t.data.value = 10;
                }
                else 
                {
                   t.data.value= c.number;
                }
                if(t.data.number == curr.number && t.data.shape.equals(curr.shape))
                {
                   deckOfCards.currentCard = t;
                }
             }
          }
          
          //read computer name
          computer.setName(dStream.readUTF());
          //read computer hand
          read = true;
          while(read)
          {
        	 String shape = dStream.readUTF();
        	 if(shape.equals("end"))
        		 read = false;
        	 else
        	 {
                Card c = new Card(shape,dStream.readInt());
                if(c.number == 1)
                   c.setValue(11);
                else
                if(c.number > 10)
                   c.setValue(10);
                else
                   c.setValue(c.number);
                computer.hand.addCard(c);
             }
          }
          dStream.close();
          tillShuffle = 1;
          loadPlayerPanel.setVisible(false);
          gamePanel.setVisible(true);
          loadGamePanel();
       }
       catch(NoSuchElementException ex)
       {
          JOptionPane.showMessageDialog(null, "File is corrupted \ncannot be read!!",null,JOptionPane.ERROR_MESSAGE);
       }
       catch(Exception e)
       {
           e.printStackTrace();
       }
    }
    
    public void loadGamePanel()
    {
       PlayerNameLabel.setText(player1.getName());
       CreditsField.setText(String.valueOf(player1.getCredits()));
       startCardButtons();
       betFieldEnabled(false);
       userActionFieldEnabled(false);
       setDealedCards();
    }
    
    public void setDealedCards()
    { 
        if(player1.hand.size == 0)
        {
          betFieldEnabled(true);
          return;
       }
       userActionFieldEnabled(true);
       for(int i = 0; i < player1.hand.size; i++)
       {
          Card c = player1.hand.cardsInHand[i];
          cardButtons[i].setIcon(getImage(c.shape,c.number));
          cardButtons[i].setEnabled(true);
       }
       Card c = computer.hand.cardsInHand[0];
       compCardButtons[0].setIcon(getImage(c.shape,c.number));
       compCardButtons[0].setEnabled(true);
       checkWinLose();
    }
    
    public void betFieldEnabled(boolean value)
    {
       betButton.setVisible(value);
       betTextField.setVisible(value);
    }
    
    public void userActionFieldEnabled(boolean value)
    {
       HitButton.setEnabled(value);
       HoldButton.setEnabled(value);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlackJackGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlackJackGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlackJackGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlackJackGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlackJackGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JLabel ComputerLabel;
    private javax.swing.JTextField CreditsField;
    private javax.swing.JLabel CreditsLabel;
    private javax.swing.JLabel EnterNameLabel;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JButton HitButton;
    private javax.swing.JButton HoldButton;
    private javax.swing.JLabel PlayerNameLabel;
    private javax.swing.JMenuItem SaveGame;
    private javax.swing.JLabel askNameLabel;
    private javax.swing.JLabel askNameOfGame;
    private javax.swing.JButton betButton;
    private javax.swing.JTextField betTextField;
    private javax.swing.JButton browseSavedGames;
    private javax.swing.JButton cancel;
    private javax.swing.JButton cancelNewGameButton;
    private javax.swing.JButton card1Button;
    private javax.swing.JButton card2Button;
    private javax.swing.JButton card3Button;
    private javax.swing.JButton card4Button;
    private javax.swing.JButton card5Button;
    private javax.swing.JButton compCard1Button;
    private javax.swing.JButton compCard2Button;
    private javax.swing.JButton compCard3Button;
    private javax.swing.JButton compCard4Button;
    private javax.swing.JButton compCard5Button;
    private javax.swing.JTextField computerPointsField;
    private javax.swing.JLabel computerPointsLabel;
    private javax.swing.JButton continueButton;
    private javax.swing.JButton drawButton;
    private javax.swing.JLayeredPane gameCenterPanel;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel loadPlayerPanel;
    private javax.swing.JButton loseButton;
    private javax.swing.JTextField nameInput;
    private javax.swing.JButton newGameButton;
    private javax.swing.JPanel newGameNames;
    private javax.swing.JButton newNameEnterButton;
    private javax.swing.JTextField newNameTextField;
    private javax.swing.JTextField playerPointsField;
    private javax.swing.JLabel playerPointsLabel;
    private javax.swing.JPanel primaryPanel;
    private javax.swing.JButton savedGameEnter;
    private javax.swing.JButton winButton;
    // End of variables declaration                   
}
